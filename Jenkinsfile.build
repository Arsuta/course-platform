def call() {
    pipeline {
        agent any
        
        parameters {
            choice(
                name: 'BRANCH',
                choices: ['main', 'develop', 'feature/*'],
                description: 'Выберите ветку для сборки'
            )
            string(
                name: 'VERSION',
                defaultValue: '',
                description: 'Версия образа (например: 1.0.0). Если не указана, будет сгенерирована автоматически'
            )
        }
        
        environment {
            NODE_VERSION = '18'
            APP_NAME = 'course-platform'
            DOCKER_REGISTRY = "45.132.1.169:32000"
            
            // Генерация версии если не указана
            VERSION = "${params.VERSION ?: sh(script: 'date +%Y.%m.%d-%H%M%S', returnStdout: true).trim()}"
            DOCKER_IMAGE = "${APP_NAME}:${VERSION}"
            DOCKER_IMAGE_LATEST = "${APP_NAME}:latest"
        }
        
        stages {
            stage('Check Registry') {
                steps {
                    script {
                        sh """
                            echo "Checking registry accessibility..."
                            curl -s http://${DOCKER_REGISTRY}/v2/_catalog > /dev/null || exit 1
                            echo "Available images:"
                            curl -s http://${DOCKER_REGISTRY}/v2/_catalog | jq .
                        """
                    }
                }
            }
            
            stage('Preparation') {
                steps {
                    cleanWs()
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "*/${params.BRANCH}"]],
                        userRemoteConfigs: [[
                            url: 'YOUR_GIT_REPO_URL',
                            credentialsId: 'git-credentials'
                        ]]
                    ])
                }
            }
            
            stage('Setup Node.js') {
                steps {
                    nodejs(nodeJSInstallationName: 'NodeJS-18') {
                        sh 'node --version'
                        sh 'npm --version'
                    }
                }
            }
            
            stage('Install Dependencies') {
                steps {
                    sh 'npm ci'
                }
            }
            
            stage('Build') {
                steps {
                    sh 'npm run build'
                }
            }
            
            stage('Docker Build and Push') {
                steps {
                    script {
                        sh """
                            # create daemon.json
                            echo '{"insecure-registries": ["${DOCKER_REGISTRY}"]}' | sudo tee /etc/docker/daemon.json
                            sudo systemctl restart docker
                            
                            # build images
                            docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE} .
                            docker tag ${DOCKER_REGISTRY}/${DOCKER_IMAGE} ${DOCKER_REGISTRY}/${DOCKER_IMAGE_LATEST}
                            
                            # push images
                            docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}
                            docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_LATEST}
                            
                            # verify push
                            echo "Pushed images:"
                            curl -s http://${DOCKER_REGISTRY}/v2/${APP_NAME}/tags/list | jq .
                        """
                    }
                }
            }
            
            stage('Create Release Tag') {
                steps {
                    script {
                        // Создаем тег в git с версией
                        sh """
                            git config --global user.email "jenkins@example.com"
                            git config --global user.name "Jenkins"
                            git tag -a "v${VERSION}" -m "Release version ${VERSION}"
                            git push origin "v${VERSION}"
                        """
                    }
                }
            }
        }
        
        post {
            always {
                cleanWs()
            }
            success {
                script {
                    echo """
                        ✅ Build successful!
                        Branch: ${params.BRANCH}
                        Version: ${VERSION}
                        Images:
                        - ${DOCKER_REGISTRY}/${DOCKER_IMAGE}
                        - ${DOCKER_REGISTRY}/${DOCKER_IMAGE_LATEST}
                    """
                }
            }
            failure {
                script {
                    echo """
                        ❌ Build failed!
                        Branch: ${params.BRANCH}
                        Version: ${VERSION}
                    """
                }
            }
        }
    }
} 