pipeline {
    agent any
    
    parameters {
        string(
            name: 'BRANCH',
            defaultValue: 'main',
            description: 'Введите имя ветки для сборки (например: main, develop, feature/your-feature)'
        )
        string(
            name: 'VERSION',
            defaultValue: '',
            description: 'Версия образа (например: 1.0.0). Если не указана, будет сгенерирована автоматически'
        )
    }
    
    environment {
        NODE_VERSION = '18'
        APP_NAME = 'course-platform'
        DOCKER_REGISTRY = "45.132.1.169:32000"
        
        VERSION = "${params.VERSION ?: sh(script: 'date +%Y.%m.%d-%H%M%S', returnStdout: true).trim()}"
        DOCKER_IMAGE = "${APP_NAME}:${VERSION}"
        DOCKER_IMAGE_LATEST = "${APP_NAME}:latest"
    }
    
    stages {
        stage('Check Registry') {
            steps {
                script {
                    sh """
                        echo "Checking registry accessibility..."
                        curl -v http://${DOCKER_REGISTRY}/v2/_catalog
                        echo "Available images:"
                        curl -v http://${DOCKER_REGISTRY}/v2/_catalog | jq .
                    """
                }
            }
        }
        
        stage('Preparation') {
            steps {
                script {
                    cleanWs()
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "*/${params.BRANCH}"]],
                        userRemoteConfigs: [[
                            url: 'https://github.com/Arsuta/course-platform',
                            credentialsId: 'git-credentials'
                        ]]
                    ])
                    
                    echo """
                        Starting build:
                        - Branch: ${params.BRANCH}
                        - Version: ${VERSION}
                        - Registry: ${DOCKER_REGISTRY}
                    """
                }
            }
        }
        
        stage('Setup Node.js') {
            steps {
                nodejs(nodeJSInstallationName: 'NodeJS-18') {
                    sh 'node --version'
                    sh 'npm --version'
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                dir('course-platform') {
                    sh 'npm ci'
                }
            }
        }
        
        stage('Build') {
            steps {
                dir('course-platform') {
                    sh 'npm run build'
                }
            }
        }
        
        stage('Docker Build and Push') {
            steps {
                script {
                    dir('course-platform') {
                        sh """
                            # create daemon.json
                            echo '{"insecure-registries": ["${DOCKER_REGISTRY}"]}' | sudo tee /etc/docker/daemon.json
                            sudo systemctl restart docker
                            
                            # build images
                            docker build -t ${DOCKER_REGISTRY}/${DOCKER_IMAGE} .
                            docker tag ${DOCKER_REGISTRY}/${DOCKER_IMAGE} ${DOCKER_REGISTRY}/${DOCKER_IMAGE_LATEST}
                            
                            # push images
                            docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE}
                            docker push ${DOCKER_REGISTRY}/${DOCKER_IMAGE_LATEST}
                            
                            # verify push
                            echo "Pushed images:"
                            curl -s http://${DOCKER_REGISTRY}/v2/${APP_NAME}/tags/list | jq .
                        """
                    }
                }
            }
        }
        
        stage('Create Release Tag') {
            steps {
                script {
                    sh """
                        git config --global user.email "jenkins@example.com"
                        git config --global user.name "Jenkins"
                        git tag -a "v${VERSION}" -m "Release version ${VERSION}"
                        git push origin "v${VERSION}"
                    """
                }
            }
        }
        
        stage('Debug Network') {
            steps {
                sh 'whoami'
                sh 'curl -v http://45.132.1.169:32000/v2/_catalog || echo "curl failed"'
                sh 'curl -v http://localhost:32000/v2/_catalog || echo "curl failed"'
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            script {
                echo """
                    ✅ Build successful!
                    Branch: ${params.BRANCH}
                    Version: ${VERSION}
                    Images:
                    - ${DOCKER_REGISTRY}/${DOCKER_IMAGE}
                    - ${DOCKER_REGISTRY}/${DOCKER_IMAGE_LATEST}
                """
            }
        }
        failure {
            script {
                echo """
                    ❌ Build failed!
                    Branch: ${params.BRANCH}
                    Version: ${VERSION}
                """
            }
        }
    }
} 